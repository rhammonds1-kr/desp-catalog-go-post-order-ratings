// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     EventHeader.avsc
 *     Rating.avsc
 *     RatingEvent.avsc
 *     Reason.avsc
 */
package post_order_ratings

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type RatingEvent struct {
	// Standard header required for all DESP publications
	EventHeader EventHeader `json:"eventHeader"`
	// One single complete rating for one order
	Rating Rating `json:"rating"`
}

const RatingEventAvroCRC64Fingerprint = "\x80\xbbV\x96\x82\xa7\xc7L"

func NewRatingEvent() RatingEvent {
	r := RatingEvent{}
	r.EventHeader = NewEventHeader()

	r.Rating = NewRating()

	return r
}

func DeserializeRatingEvent(r io.Reader) (RatingEvent, error) {
	t := NewRatingEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRatingEventFromSchema(r io.Reader, schema string) (RatingEvent, error) {
	t := NewRatingEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRatingEvent(r RatingEvent, w io.Writer) error {
	var err error
	err = writeEventHeader(r.EventHeader, w)
	if err != nil {
		return err
	}
	err = writeRating(r.Rating, w)
	if err != nil {
		return err
	}
	return err
}

func (r RatingEvent) Serialize(w io.Writer) error {
	return writeRatingEvent(r, w)
}

func (r RatingEvent) Schema() string {
	return "{\"fields\":[{\"doc\":\"Standard header required for all DESP publications\",\"name\":\"eventHeader\",\"type\":{\"doc\":\"The below fields include header information and should be included on every event in the DESP. Inspired by: https://github.com/cloudevents/spec/blob/v0.2/spec.md\",\"fields\":[{\"doc\":\"A unique identifier of the event - for example, a randomly generated GUID\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Time the event occurred in milliseconds since epoch, UTC timezone.\",\"name\":\"time\",\"type\":\"long\"},{\"doc\":\"Type of occurrence which has happened. Reference the domain.event registered in schema-registry.\",\"name\":\"type\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Service that produced the event. Future: reference to producer registry.\",\"name\":\"source\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"EventHeader\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"}},{\"doc\":\"One single complete rating for one order\",\"name\":\"rating\",\"type\":{\"fields\":[{\"doc\":\"Unique id assigned to every rating\",\"name\":\"rating_id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date and time the rating was submitted\",\"name\":\"rating_date\",\"type\":{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format. This value is always in UTC time.\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"The TZ database timezone\",\"name\":\"timezone\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"DateTime\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"}},{\"doc\":\"Customer specified rating for the order experience\",\"name\":\"customer_rating\",\"type\":\"double\"},{\"doc\":\"The name of the fulfillment partner\",\"name\":\"partner\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"The 19 digit suborder id that is being rated\",\"name\":\"order_id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Optional list of reasons for this rating provided by the customer\",\"name\":\"reasons\",\"type\":[\"null\",{\"fields\":[],\"items\":{\"fields\":[{\"doc\":\"Customer selected reason from pulldown list\",\"name\":\"selection\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"ordered_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"received_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Freeform comment entered by customer\",\"name\":\"comment\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"Reason\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"doc\":\"Customer specified NPS rating\",\"name\":\"nps\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Identifier of the partner individual handling the order\",\"name\":\"associate_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"Rating\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"}}],\"name\":\"com.kroger.desp.events.kcp.postorder.ratings.RatingEvent\",\"type\":\"record\"}"
}

func (r RatingEvent) SchemaName() string {
	return "com.kroger.desp.events.kcp.postorder.ratings.RatingEvent"
}

func (_ RatingEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RatingEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RatingEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RatingEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RatingEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RatingEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RatingEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ RatingEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RatingEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.EventHeader = NewEventHeader()

		return &types.Record{Target: &r.EventHeader}
	case 1:
		r.Rating = NewRating()

		return &types.Record{Target: &r.Rating}
	}
	panic("Unknown field index")
}

func (r *RatingEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *RatingEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ RatingEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RatingEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RatingEvent) Finalize()                        {}

func (_ RatingEvent) AvroCRC64Fingerprint() []byte {
	return []byte(RatingEventAvroCRC64Fingerprint)
}

func (r RatingEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["eventHeader"], err = json.Marshal(r.EventHeader)
	if err != nil {
		return nil, err
	}
	output["rating"], err = json.Marshal(r.Rating)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RatingEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["eventHeader"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventHeader); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eventHeader")
	}
	val = func() json.RawMessage {
		if v, ok := fields["rating"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rating); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for rating")
	}
	return nil
}
