// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     EventHeader.avsc
 *     Rating.avsc
 *     RatingEvent.avsc
 *     Reason.avsc
 */
package post_order_ratings

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Reason struct {
	// Customer selected reason from pulldown list
	Selection string `json:"selection"`
	// Only applicable for certain reason types
	Ordered_item_id *UnionNullString `json:"ordered_item_id"`
	// Only applicable for certain reason types
	Received_item_id *UnionNullString `json:"received_item_id"`
	// Freeform comment entered by customer
	Comment *UnionNullString `json:"comment"`
}

const ReasonAvroCRC64Fingerprint = "\xbanY\x06Ì²\xdea"

func NewReason() Reason {
	r := Reason{}
	r.Ordered_item_id = NewUnionNullString()

	r.Ordered_item_id = nil
	r.Received_item_id = NewUnionNullString()

	r.Received_item_id = nil
	r.Comment = NewUnionNullString()

	r.Comment = nil
	return r
}

func DeserializeReason(r io.Reader) (Reason, error) {
	t := NewReason()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeReasonFromSchema(r io.Reader, schema string) (Reason, error) {
	t := NewReason()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeReason(r Reason, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Selection, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ordered_item_id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Received_item_id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Comment, w)
	if err != nil {
		return err
	}
	return err
}

func (r Reason) Serialize(w io.Writer) error {
	return writeReason(r, w)
}

func (r Reason) Schema() string {
	return "{\"fields\":[{\"doc\":\"Customer selected reason from pulldown list\",\"name\":\"selection\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"ordered_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"received_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Freeform comment entered by customer\",\"name\":\"comment\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"com.kroger.desp.commons.kcp.postorder.ratings.Reason\",\"type\":\"record\"}"
}

func (r Reason) SchemaName() string {
	return "com.kroger.desp.commons.kcp.postorder.ratings.Reason"
}

func (_ Reason) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Reason) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Reason) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Reason) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Reason) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Reason) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Reason) SetString(v string)   { panic("Unsupported operation") }
func (_ Reason) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Reason) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Selection}
	case 1:
		r.Ordered_item_id = NewUnionNullString()

		return r.Ordered_item_id
	case 2:
		r.Received_item_id = NewUnionNullString()

		return r.Received_item_id
	case 3:
		r.Comment = NewUnionNullString()

		return r.Comment
	}
	panic("Unknown field index")
}

func (r *Reason) SetDefault(i int) {
	switch i {
	case 1:
		r.Ordered_item_id = nil
		return
	case 2:
		r.Received_item_id = nil
		return
	case 3:
		r.Comment = nil
		return
	}
	panic("Unknown field index")
}

func (r *Reason) NullField(i int) {
	switch i {
	case 1:
		r.Ordered_item_id = nil
		return
	case 2:
		r.Received_item_id = nil
		return
	case 3:
		r.Comment = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Reason) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Reason) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Reason) Finalize()                        {}

func (_ Reason) AvroCRC64Fingerprint() []byte {
	return []byte(ReasonAvroCRC64Fingerprint)
}

func (r Reason) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["selection"], err = json.Marshal(r.Selection)
	if err != nil {
		return nil, err
	}
	output["ordered_item_id"], err = json.Marshal(r.Ordered_item_id)
	if err != nil {
		return nil, err
	}
	output["received_item_id"], err = json.Marshal(r.Received_item_id)
	if err != nil {
		return nil, err
	}
	output["comment"], err = json.Marshal(r.Comment)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Reason) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["selection"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Selection); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for selection")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ordered_item_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ordered_item_id); err != nil {
			return err
		}
	} else {
		r.Ordered_item_id = NewUnionNullString()

		r.Ordered_item_id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["received_item_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Received_item_id); err != nil {
			return err
		}
	} else {
		r.Received_item_id = NewUnionNullString()

		r.Received_item_id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["comment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Comment); err != nil {
			return err
		}
	} else {
		r.Comment = NewUnionNullString()

		r.Comment = nil
	}
	return nil
}
