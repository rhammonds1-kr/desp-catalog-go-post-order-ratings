// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     EventHeader.avsc
 *     Rating.avsc
 *     RatingEvent.avsc
 *     Reason.avsc
 */
package post_order_ratings

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Rating struct {
	// Unique id assigned to every rating
	Rating_id string `json:"rating_id"`
	// Date and time the rating was submitted
	Rating_date DateTime `json:"rating_date"`
	// Customer specified rating for the order experience
	Customer_rating float64 `json:"customer_rating"`
	// The name of the fulfillment partner
	Partner string `json:"partner"`
	// The 19 digit suborder id that is being rated
	Order_id string `json:"order_id"`
	// Optional list of reasons for this rating provided by the customer
	Reasons *UnionNullArrayReason `json:"reasons"`
	// Customer specified NPS rating
	Nps *UnionNullString `json:"nps"`
	// Identifier of the partner individual handling the order
	Associate_id *UnionNullString `json:"associate_id"`
}

const RatingAvroCRC64Fingerprint = "}0\xeb\xacÃç\a\x96"

func NewRating() Rating {
	r := Rating{}
	r.Rating_date = NewDateTime()

	r.Reasons = NewUnionNullArrayReason()

	r.Reasons = nil
	r.Nps = NewUnionNullString()

	r.Nps = nil
	r.Associate_id = NewUnionNullString()

	r.Associate_id = nil
	return r
}

func DeserializeRating(r io.Reader) (Rating, error) {
	t := NewRating()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRatingFromSchema(r io.Reader, schema string) (Rating, error) {
	t := NewRating()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRating(r Rating, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Rating_id, w)
	if err != nil {
		return err
	}
	err = writeDateTime(r.Rating_date, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Customer_rating, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Partner, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Order_id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayReason(r.Reasons, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nps, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Associate_id, w)
	if err != nil {
		return err
	}
	return err
}

func (r Rating) Serialize(w io.Writer) error {
	return writeRating(r, w)
}

func (r Rating) Schema() string {
	return "{\"fields\":[{\"doc\":\"Unique id assigned to every rating\",\"name\":\"rating_id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date and time the rating was submitted\",\"name\":\"rating_date\",\"type\":{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format. This value is always in UTC time.\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"The TZ database timezone\",\"name\":\"timezone\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"DateTime\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"}},{\"doc\":\"Customer specified rating for the order experience\",\"name\":\"customer_rating\",\"type\":\"double\"},{\"doc\":\"The name of the fulfillment partner\",\"name\":\"partner\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"The 19 digit suborder id that is being rated\",\"name\":\"order_id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Optional list of reasons for this rating provided by the customer\",\"name\":\"reasons\",\"type\":[\"null\",{\"fields\":[],\"items\":{\"fields\":[{\"doc\":\"Customer selected reason from pulldown list\",\"name\":\"selection\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"ordered_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"received_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Freeform comment entered by customer\",\"name\":\"comment\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"Reason\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"doc\":\"Customer specified NPS rating\",\"name\":\"nps\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Identifier of the partner individual handling the order\",\"name\":\"associate_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"com.kroger.desp.commons.kcp.postorder.ratings.Rating\",\"type\":\"record\"}"
}

func (r Rating) SchemaName() string {
	return "com.kroger.desp.commons.kcp.postorder.ratings.Rating"
}

func (_ Rating) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Rating) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Rating) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Rating) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Rating) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Rating) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Rating) SetString(v string)   { panic("Unsupported operation") }
func (_ Rating) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Rating) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Rating_id}
	case 1:
		r.Rating_date = NewDateTime()

		return &types.Record{Target: &r.Rating_date}
	case 2:
		return &types.Double{Target: &r.Customer_rating}
	case 3:
		return &types.String{Target: &r.Partner}
	case 4:
		return &types.String{Target: &r.Order_id}
	case 5:
		r.Reasons = NewUnionNullArrayReason()

		return r.Reasons
	case 6:
		r.Nps = NewUnionNullString()

		return r.Nps
	case 7:
		r.Associate_id = NewUnionNullString()

		return r.Associate_id
	}
	panic("Unknown field index")
}

func (r *Rating) SetDefault(i int) {
	switch i {
	case 5:
		r.Reasons = nil
		return
	case 6:
		r.Nps = nil
		return
	case 7:
		r.Associate_id = nil
		return
	}
	panic("Unknown field index")
}

func (r *Rating) NullField(i int) {
	switch i {
	case 5:
		r.Reasons = nil
		return
	case 6:
		r.Nps = nil
		return
	case 7:
		r.Associate_id = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Rating) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Rating) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Rating) Finalize()                        {}

func (_ Rating) AvroCRC64Fingerprint() []byte {
	return []byte(RatingAvroCRC64Fingerprint)
}

func (r Rating) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["rating_id"], err = json.Marshal(r.Rating_id)
	if err != nil {
		return nil, err
	}
	output["rating_date"], err = json.Marshal(r.Rating_date)
	if err != nil {
		return nil, err
	}
	output["customer_rating"], err = json.Marshal(r.Customer_rating)
	if err != nil {
		return nil, err
	}
	output["partner"], err = json.Marshal(r.Partner)
	if err != nil {
		return nil, err
	}
	output["order_id"], err = json.Marshal(r.Order_id)
	if err != nil {
		return nil, err
	}
	output["reasons"], err = json.Marshal(r.Reasons)
	if err != nil {
		return nil, err
	}
	output["nps"], err = json.Marshal(r.Nps)
	if err != nil {
		return nil, err
	}
	output["associate_id"], err = json.Marshal(r.Associate_id)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Rating) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["rating_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rating_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for rating_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["rating_date"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rating_date); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for rating_date")
	}
	val = func() json.RawMessage {
		if v, ok := fields["customer_rating"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer_rating); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for customer_rating")
	}
	val = func() json.RawMessage {
		if v, ok := fields["partner"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Partner); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for partner")
	}
	val = func() json.RawMessage {
		if v, ok := fields["order_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for order_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["reasons"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Reasons); err != nil {
			return err
		}
	} else {
		r.Reasons = NewUnionNullArrayReason()

		r.Reasons = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nps"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nps); err != nil {
			return err
		}
	} else {
		r.Nps = NewUnionNullString()

		r.Nps = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["associate_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Associate_id); err != nil {
			return err
		}
	} else {
		r.Associate_id = NewUnionNullString()

		r.Associate_id = nil
	}
	return nil
}
