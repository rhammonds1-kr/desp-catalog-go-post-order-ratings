// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     EventHeader.avsc
 *     Rating.avsc
 *     RatingEvent.avsc
 *     Reason.avsc
 */
package post_order_ratings

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

type UnionNullArrayReasonTypeEnum int

const (
	UnionNullArrayReasonTypeEnumArrayReason UnionNullArrayReasonTypeEnum = 1
)

type UnionNullArrayReason struct {
	Null        *types.NullVal
	ArrayReason []Reason
	UnionType   UnionNullArrayReasonTypeEnum
}

func writeUnionNullArrayReason(r *UnionNullArrayReason, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayReasonTypeEnumArrayReason:
		return writeArrayReason(r.ArrayReason, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayReason")
}

func NewUnionNullArrayReason() *UnionNullArrayReason {
	return &UnionNullArrayReason{}
}

func (r *UnionNullArrayReason) Serialize(w io.Writer) error {
	return writeUnionNullArrayReason(r, w)
}

func DeserializeUnionNullArrayReason(r io.Reader) (*UnionNullArrayReason, error) {
	t := NewUnionNullArrayReason()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayReasonFromSchema(r io.Reader, schema string) (*UnionNullArrayReason, error) {
	t := NewUnionNullArrayReason()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayReason) Schema() string {
	return "[\"null\",{\"fields\":[],\"items\":{\"fields\":[{\"doc\":\"Customer selected reason from pulldown list\",\"name\":\"selection\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"ordered_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Only applicable for certain reason types\",\"name\":\"received_item_id\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]},{\"default\":null,\"doc\":\"Freeform comment entered by customer\",\"name\":\"comment\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"Reason\",\"namespace\":\"com.kroger.desp.commons.kcp.postorder.ratings\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayReason) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayReason) SetLong(v int64) {

	r.UnionType = (UnionNullArrayReasonTypeEnum)(v)
}

func (r *UnionNullArrayReason) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayReason = make([]Reason, 0)
		return &ArrayReasonWrapper{Target: (&r.ArrayReason)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayReason) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullArrayReason) Finalize()                        {}

func (r *UnionNullArrayReason) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayReasonTypeEnumArrayReason:
		return json.Marshal(map[string]interface{}{"array": r.ArrayReason})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayReason")
}

func (r *UnionNullArrayReason) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayReason)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayReason")
}
